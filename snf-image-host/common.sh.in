# Copyright (C) 2011-2016 GRNET S.A. and individual contributors
# Copyright (C) 2007, 2008, 2009 Google Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

SNF_IMAGE_VERSION="@VERSION@"

AWK="awk"
LOSETUP="losetup"
TIMEOUT="timeout"
CURL="curl -fL"
TAR="tar"
DATE="date -u" # Time in UTC
KVM="kvm"
MD5SUM="md5sum"
BLOCKDEV="blockdev"
DD="dd"
PARTED="parted"

CONFDIR=@confdir@
BACKENDSDIR=@backendsdir@

# Temporary use stderr as monitoring file descriptor.
# `create' will overwrite this
MONITOR_FD="2"

MSG_TYPE_ERROR="image-error"
MSG_TYPE_INFO="image-info"

CLEANUP=( )
ERROR_MSGS=( )


add_cleanup() {
    local cmd=""
    for arg; do cmd+=$(printf "%q " "$arg"); done
    CLEANUP+=("$cmd")
}

log_error() {
    echo "[ERROR] $*" >&2
}

log_warning() {
    echo "[WARNING] $*" >&2
}

report_error() {
    ERROR_MSGS+=("$@")
}

report_info() {
    local report
    echo "[INFO] $*" >&2
    report="$(./host-monitor.py info <<< "$*")"
    eval "echo $(printf "%q" "$report") >&${MONITOR_FD}"
}


close_fd() {
    local fd="$1"
    exec {fd}>&-
}

send_errors() {
    local report=""
    if [ ${#ERROR_MSGS[@]} -gt 0 ]; then
        local msg=""
        for err in "${ERROR_MSGS[@]}"; do
            msg+="$(echo "$err")"
        done
        report="$(./host-monitor.py error <<< "$msg")"
    else
        report=$(./host-monitor.py error <<< "Internal Error: Image deployment failed.")
    fi

    eval "echo $(printf "%q" "$report") >&${MONITOR_FD}"
}

create_array() {
    local prefix postfix i cnt array_name

    prefix=$1
    postfix=$2
    cnt="${prefix}_COUNT"
    array_name="${prefix}_${postfix}"

    declare -g -a ${array_name}

    for ((i = 0; i < ${!cnt}; i++)); do
        eval ${array_name}\[$i\]=\$\{${prefix}_${i}_${postfix}\}
    done
}

get_api20_arguments() {
    local postfix i

    if [ -z "$INSTANCE_NAME" -o -z "$HYPERVISOR" -o -z "$DISK_COUNT" ]; then
        log_error "Missing OS API Variable: (INSTANCE_NAME HYPERVISOR or DISK_COUNT)"
        exit 1
    fi

    case $HYPERVISOR in
        xen-hvm|xen-pvm) . xen-common.sh ;;
        kvm) . kvm-common.sh ;;
        *) log_error "Unsupported hypervisor: \`$HYPERVISOR'"; exit 1;;
    esac

    instance=$INSTANCE_NAME
    if [ $DISK_COUNT -lt 1 ]; then
        log_error "At least one disk is needed"
        exit 1
    fi

    # Create bash arrays for all the provided disk info
    for postfix in PATH URI ACCESS UUID NAME FRONTEND_TYPE BACKEND_TYPE; do
        create_array DISK $postfix
    done

    #Check if disks are URIs
    for ((i = 0; i < DISK_COUNT; i++)); do
        if ! [ -b "${DISK_PATH[$i]}" -o -f "${DISK_PATH[$i]}" ]; then
            DISK_PATH[$i]="${DISK_URI[$i]}"
        fi
    done

    if [ "$SCRIPT_NAME" = "export" ]; then
        if [ -z "$EXPORT_DEVICE" ]; then
            log_error "Missing OS API Variable: \`EXPORT_DEVICE'"
            exit 1
        fi
        export_disk=$EXPORT_DEVICE
    elif [ "$SCRIPT_NAME" = "import" ]; then
        if [ -z "$IMPORT_DEVICE" ]; then
            log_error "Missing OS API Variable: \`IMPORT_DEVICE'"
            exit 1
        fi
        import_disk=$IMPORT_DEVICE
    else
        disk0=${DISK_PATH[0]}
    fi
    if [ "$SCRIPT_NAME" = "rename" -a -z "$OLD_INSTANCE_NAME" ]; then
        log_error "Missing OS API Variable: \`OLD_INSTANCE_NAME'"
        exit 1
    fi

    old_name=$OLD_INSTANCE_NAME
    disk_type=$INSTANCE_HV_disk_type

    if [ "$SCRIPT_NAME" = "create" ]; then
        local osparams osp

        osparams=(IMG_ID IMG_FORMAT IMG_PASSWD IMG_PASSWD_HASH IMG_PROPERTIES
                  IMG_PERSONALITY CONFIG_URL OS_PRODUCT_KEY OS_ANSWER_FILE
                  AUTH_KEYS CLOUD_USERDATA INST_PROPERTIES)

        # Store OSP_VAR in VAR
        for param in "${osparams[@]}"; do
            # This is black magic. Only execute the eval command if the "param"
            # variable is set. This way we can distinguish between variables
            # with value "" and variables that have not been set at all
            osp="OSP_$param"
            if [ -n "${!osp+dummy}" ]; then
                eval $param=\"\$$osp\"
            fi
        done

        if [ -n "$CONFIG_URL" ]; then
            local config config_params
            echo "Downloading configuration parameters from: \`$CONFIG_URL'" >&2
            config=$($CURL "$CONFIG_URL")
            config_params=$(./decode-config.py "${osparams[@]}" <<< "$config")
            eval "$config_params"
        fi
    fi
}

parameter_check() {
    local required_osparams="IMG_ID IMG_FORMAT"

    for var in $required_osparams; do
        if [ -z "${!var}" ]; then
             log_error "Missing OS API Parameter: ${var}"
             exit 1
        fi
    done

    if [ -n "${IMG_PASSWD+dummy}" -a -n "${IMG_PASSWD_HASH+dummy}" ]; then
        log_error "Conflicting OS API Parameters \`IMG_PASSWD' and " \
            "\`IMG_PASSWD_HASH' both defined."
        exit 1
    fi
}

create_mbr() {
    local size img_type disk pid
    size="$1"
    img_type="$2"

    if [ "$img_type" = "diskdump" ]; then
        echo "/dev/null"
        return
    elif [ "$img_type" = ntfsdump ]; then
        fstype=NTFS
        snf_export_PROPERTY_OSFAMILY="windows"
    elif [ "$img_type" = extdump ]; then
        fstype=ext2
        snf_export_PROPERTY_OSFAMILY="linux"
    else
        log_error "Unknown Image format: \`$img_type'"
        report_error "Unknown Image Format"
        exit 1
    fi

    snf_export_PROPERTY_ROOT_PARTITION=1

    disk="$(mktemp)"
    add_cleanup rm -f "$disk"
    truncate -s "$((size + 2048*512))" "$disk"
    $PARTED -s "$disk" -- mklabel msdos mkpart primary $fstype 2048s -1s set 1 boot on
    $DD if=mbr.bin of="$disk" bs=440 count=1 conv=notrunc
    truncate -s "$((2048*512))" "$disk"
    echo "$disk"
}

# This is used for export/import and in case we have an fsdump image type.
# If the give disk is a block device this is a no-op.
losetup_disk() {
    local disk bdev

    disk="$1"

    if [ -b "$disk" ]; then
        echo "$disk"
    elif [ -f "$disk" ] ; then
        bdev=$($LOSETUP --show -f "$disk")
        echo $bdev
    else
        log_error "Cannot losetup $disk: not a regular file"
        report_error "Could not use disk provided by Ganeti"
        exit 1
    fi
}

unlosetup_disk() {
    local bdev
    bdev="$1"

    if [[ -b "$bdev" && "$bdev" = /dev/loop* ]]; then
        $LOSETUP -d "$bdev"
    fi
}

create_floppy() {
    local img target IFS index name tm

    img=$1

    IFS=$'\t' read index name tm <<< \
        "$(grep -Pi "^[0-9]{3}\\t$WINDOWS_TIMEZONE\\t" \
        ms-timezone-indexes.txt || true)"

    if [[ ! "$index" =~ [0-9]{3} ]]; then
        log_error "Invalid value for WINDOWS_TIMEZONE (=$WINDOWS_TIMEZONE) variable"
    fi

    target=$(mktemp -d)
    add_cleanup rmdir "$target"

    $DD bs=512 count=2880 if=/dev/zero of="$img"
    mkfs.ext2 -F "$img" > /dev/null
    mount "$img" "$target" -o loop

    if [ -n "$UNATTEND" ]; then
        log_warning "Used deprecated variable UNATTEND which may be removed in the future"
        if [ -f "$UNATTEND" ]; then
            cat "$UNATTEND" > "$target/unattend.xml"
        else
            log_error "File defined with UNATTEND variable (=$UNATTEND) does not exist"
            exit 1
        fi
    elif [ -n "$OS_ANSWER_FILE" ]; then
        $CURL "$OS_ANSWER_FILE" > "$target/unattend.xml"
        # This file has higher priority than the one in the image
        snf_export_PROPERTY_IGNORE_UNATTEND=yes
    else
        sed -e "s/@TIMEZONE@/$name/g" unattend.xml.in > "$target/unattend.xml"
    fi

    # Since unattend.xml and sysprep.inf are used mutually exclusive, if the
    # user has defined an OS Answer File, make both of them point to it.
    if [ -n "$OS_ANSWER_FILE" ]; then
        ln -s unattend.xml "$target/sysprep.inf"
    else
        sed -e "s/@TIMEZONE_INDEX@/$index/g" sysprep.inf.in > "$target/sysprep.inf"
    fi

    set | egrep ^snf_export_\\w+= | sed -e 's/^snf_export_/export SNF_IMAGE_/' \
        > "$target/rules"

    # Put all the NIC info in the floppy
    set | egrep ^NIC_ | sed -e 's/^/export SNF_IMAGE_/' >> "$target/rules"
    umount "$target"
}

get_backend() {
    local target=$1
    local id=$2
    local bckend answer priority IFS conf ret

    for bckend in "$BACKENDSDIR/${target}"/*; do
        conf="${CONFDIR}/backends/${target}/$(basename "$bckend")"
        # Check if the back-end is disabled
        if [ -f "${conf}.disabled" ]; then
            log_warning "Not examining disabled back-end: $bckend"
            continue
        fi

        # Check if there is a priority file
        if [ -f "${conf}.priority" ]; then
            priority=$(<"${conf}.priority")
            if ! [[ "$priority" =~ ^[0-9]{1,2}$ ]]; then
                log_warning "Invalid priority: $priority for $bckend. Using 50."
                priority=50
            fi
        else
            priority=50
        fi

        if [ ${#priority} -eq 1 ]; then
            priority="0$priority"
        fi

        backends+=("${priority}@${bckend}")
    done

    # Sort the list of back-ends. Let's hope none has a new line in the
    # filename. I couldn't make it for with \0 for IFS.
    IFS=$'\n'
    mapfile -t backends < <(sort -rn <<< "${backends[*]}")
    unset IFS

    for bckend in "${backends[@]}"; do
        # Remove the priority prefix
        bckend="${bckend:3}"
        if [ -d "$bckend" ]; then
            bckend="${bckend}/$(basename "$bckend")"
        fi

        answer=
        if [ -x "$bckend" ]; then
            answer=$($bckend -p "$id")
            ret=$?
            if [ $ret -ne 0 ]; then
                log_warning "Ignoring back-end: $bckend that returned error (rc=$ret)"
                answer=
            fi
        else
            log_warning "Ignoring non-executable back-end: $bckend"
        fi

        if [ "$answer" = yes ]; then
            echo "$bckend"
            return
        fi
    done

    log_error "Could not find suitable back-end to handle \`$id'"
    exit 1
}

init_backend() {
    local usage="$0 [ -s | -p ] URL"
    local name="$(basename "$0")"
    local target=$1; shift

    SIZE=no
    PROBE=no

    while getopts "hsp" opt; do
        case "$opt" in
            h) echo $usage >&2
                exit 0
                ;;
            s) SIZE=yes
                ;;
            p) PROBE=yes
                ;;
            \?) exit 1
                ;;
        esac
    done

    shift $((OPTIND - 1))
    if [ $# -eq 0 ]; then
        log_error "Missing URL"
        exit 1
    elif [ $# -gt 1 ]; then
        log_error "Too many arguments"
        exit 1
    fi

    URL=$1

    if [ "$SIZE" = yes -a "$PROBE" = yes ]; then
        log_error "-s and -p both defined"
        exit 1
    fi

    if [ -f "$CONFDIR/backends/${target}/$name.conf" ]; then
        source "$CONFDIR/backends/${target}/$name.conf"
    fi
}

# this one is only to be called by Ganeti OS interface scripts
ganeti_os_main() {

    if [ "$OS_API_VERSION" != "20" ]; then
        log_error "Unsupported OS API VERSION: \`$OS_API_VERSION'." \
            "Only OS API VERSION 20 is supported"
        exit 1
    fi

    source_variant
    get_api20_arguments
}

source_variant() {
    if [ -n "$OS_VARIANT" ]; then
        if [ ! -d "$VARIANTS_DIR" ]; then
            log_error "OS Variants directory $VARIANTS_DIR doesn't exist"
            exit 1
        fi
        VARIANT_CONFIG="$VARIANTS_DIR/$OS_VARIANT.conf"
        if [ -f "$VARIANT_CONFIG" ]; then
            . "$VARIANT_CONFIG"
        else
            if grep -qxF "$OS_VARIANT" variants.list; then
                log_error "ERROR: snf-image configuration error. Published" \
                    "variant $OS_VARIANT is missing its config file. Please" \
                    "create $VARIANT_CONFIG or unpublish the variant (by" \
                    "removing $OS_VARIANT from variants.list). "
            else
                log_error "Unofficial variant $OS_VARIANT is unsupported." \
                    "Most probably this is a user error, forcing a wrong" \
                    "name. To support this variant please create file" \
                    "$VARIANT_CONFIG."
            fi
            exit 1
        fi
    fi
}

do_multistrap() {
   local target="$1"
   local cache="$2"
   local pkgs="$3"

    # Create preferences.d for apt
    mkdir -p "$target/etc/apt/preferences.d"
    if [ -d "$MULTISTRAP_APTPREFDIR" ]; then
        find "$MULTISTRAP_APTPREFDIR" -maxdepth 1 -type f -exec cp {} "$target/etc/apt/preferences.d" \;
    fi

    # Create a policy-rc.d file to deny init script execution
    mkdir -p "$target/usr/sbin"
    cat > "$target/usr/sbin/policy-rc.d" <<EOF
#!/bin/sh
exit 101
EOF
    chmod +x "$target/usr/sbin/policy-rc.d"

   multistrap -d "$target" -f "$MULTISTRAP_CONFIG" 2>&1 | sed -u -e 's/^/MULTISTRAP: /g'

   rm "$target/usr/sbin/policy-rc.d"
   rm -rf "$target/etc/apt/preferences.d"
}

report_and_cleanup() {
    # We should never fail here
    set +e
    send_errors
    cleanup
}

suppress_errors() {
    "$@" &> /dev/null || true
}

check_helper_rc() {
    local rc=$1

    if [ $rc -ne 0 ]; then
        if [ $rc -eq 124 ];  then
            log_error "Customization VM was terminated. Did not finish on time."
            report_error "Image customization failed. Did not finish on time."
        elif [ $rc -eq 137 ]; then # (128 + SIGKILL)
            log_error "Customization VM was killed. Did not finish on time."
            report_error "Image customization failed. Did not finish on time."
        elif [ $rc -eq 141 ]; then # (128 + SIGPIPE)
            log_error "Customization VM was terminated by a SIGPIPE." \
                "Maybe progress monitor has died unexpectedly."
        elif [ $rc -eq 125 ]; then
            log_error "Internal Error. Image customization could not start." \
                "timeout did not manage to run."
        else
            log_error "Customization VM died unexpectedly (return code $rc)."
        fi
        exit 1
    else
        report_info "Customization VM exited normally."
    fi
}

check_helper_result() {
   local result=$1

    if [ "x$result" != "xSUCCESS" ]; then
        log_error "Image customization failed."
        report_error "Image customization failed."
        exit 1
    fi
}

ignore_failure() {
    "$@" &> /dev/null || true
}

cleanup() {
    # We shouldn't fail here
    set +e

    if [ ${#CLEANUP[*]} -gt 0 ]; then
        LAST_ELEMENT=$((${#CLEANUP[*]}-1))
        REVERSE_INDEXES=$(seq ${LAST_ELEMENT} -1 0)
        for i in $REVERSE_INDEXES; do
            # If something fails here, it's better to retry it for a few times
            # before we give up with an error. This is needed for kpartx when
            # dealing with NTFS partitions mounted through fuse. umount is not
            # synchronous and may return while the partition is still busy. A
            # premature attempt to delete partition mappings through kpartx on
            # a device that hosts previously mounted NTFS partition may fail
            # with errors like this one:
            # `device-mapper: remove ioctl failed: Device or resource busy'
            # A sensible workaround for this is to wait for a while and then
            # retry it.
            local cmd=${CLEANUP[$i]}
            $cmd || for interval in 0.25 0.5 1 2 4; do
            echo "Command $cmd failed!"
            echo "I'll wait for $interval secs and will retry..."
            sleep $interval
            $cmd && break
        done
        if [ "$?" != "0" ]; then
            echo "Giving Up..."
            exit 1;
        fi
    done
  fi
}

trap cleanup EXIT

CONFFILE="@confdir@/snf-image.conf"
if [ -f "$CONFFILE" ]; then
    . "$CONFFILE"
fi

: ${VARIANTS_DIR:="@sysconfdir@/ganeti/snf-image/variants"}
: ${IMAGE_DEBUG:="no"}
: ${CLOUD_INIT_DEBUG:="no"}
: ${HELPER_DIR:="@HELPER_DIR@"}
: ${HELPER_SOFT_TIMEOUT:=120}
: ${HELPER_HARD_TIMEOUT:=5}
: ${HELPER_USER:="nobody"}
: ${HELPER_MEMORY:="512"}
: ${PROGRESS_MONITOR:="@PROGRESS_MONITOR@"}
: ${UNATTEND:="@UNATTEND@"}
: ${WINDOWS_TIMEZONE:="GMT Standard Time"}
: ${XEN_SCRIPTS_DIR="@sysconfdir@/xen/scripts"}
: ${XEN_CMD:="@XEN_CMD@"}
: ${MULTISTRAP_CONFIG:="@MULTISTRAP_CONFIG@"}
: ${MULTISTRAP_APTPREFDIR:="@MULTISTRAP_APTPREFDIR@"}
: ${DHCP_TAGS:="auto dhcp nfdhcpd"}
: ${STATEFUL_DHCPV6_TAGS:="dhcpv6 stateful_dhcpv6"}
: ${STATELESS_DHCPV6_TAGS:="nfdhcpd stateless_dhcpv6"}
: ${DEFAULT_NIC_CONFIG:="dhcp"}

if [ -n "${VERSION_CHECK+dummy}" ]; then
    log_warning "VERSION_CHECK is deprecated and may be remove in the future"
fi

found=no
for val in "" dhcp {dhcp+,}{dhcpv6,slaac,slaac_dhcp}; do
    if [ "$DEFAULT_NIC_CONFIG" = "$val" ]; then
        found=yes
        break
    fi
done

if [ "$found" = "no" ]; then
    log_error "DEFAULT_NIC_CONFIG (=\`$DEFAULT_NIC_CONFIG') has invalid value."
    log_error "Valid values are: \`'" dhcp {dhcp+,}{dhcpv6,slaac,slaac_dhcp}
    exit 1
fi

SCRIPT_NAME=$(basename $0)

# vim: set sta sts=4 shiftwidth=4 sw=4 et ai :
